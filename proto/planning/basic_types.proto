syntax = "proto3";

package proto;

// Empty type for RPCs which require no specific request/response data.
message Null {}

// Joint configuration for a single robot.
message Conf {
  // Array of joint position data, i.e., data = [q_0, q_1, ..., q_N] for a
  // robot with N degrees of freedom.
  repeated double data = 1;
}

// "System configuration", a type mapping individual robots to respective
// independent configurations. To be a valid system configuration, each robot in
// the associated model must be represented.
message SystemConf {
  // A map of robot names to individual robot configurations.
  map<string, Conf> data = 1;
}

// Pair of system configurations representing an edge in the configuration
// space.
message SystemConfEdge {
  // Vertex 1
  SystemConf u = 1;
  // Vertex 2
  SystemConf v = 2;
}

// Real-valued coefficients of a single polynomial.
message Coeffs {
  // Array of term-by-term coefficients. For a polynomial of the form
  // f(t) = c_0 + c_1 * t + c_2 * t^2 + c_3 * t_3, we would have
  // data = [c_0, c_1, c_2, c_3].
  repeated double data = 1;
}
// A scalar piecewise polynomial trajectory in time. In practice, we encode
// robot trajectories  where for each interval [t, t'] we define a
// univariate cubic (in time t) polynomial for every robot joint.
//
// note: the coefficients are stored in this message type as an array of arrays,
// so care must be taken to properly unpack the data according to the provided
message PiecewisePolynomial {
  // Array of points in time which represent the intervals over which each
  // constituent polynomial is defined.
  repeated double breaks = 1;
  // Number of rows of the polynomial matrix. In practice, this corresponds to
  // the degrees of freedom of the corresponding robot.
  uint32 rows = 2;
  // Number of columns of the polynomial matrix. In practice, this is equivalent
  // to one.
  uint32 cols = 3;
  // Array of arrays of polynomial coefficients. A trajectory for a robot of M
  // degrees of freedom over N continuous intervals should have M * N arrays of
  // coefficients.
  repeated Coeffs coeffs = 4;
}

// System polynomial. Akin to the "system configuration", represent a map of
// individual piecewise polynomials to their respective target robots.
message SystemPolynomial {
  // A map of robot names to individual piecewise polynomials.
  map<string, PiecewisePolynomial> data = 1;
}

// System trajectory. An array of system configurations in time.
message SystemTrajectory {
  repeated SystemConf data = 1;
  uint32 interval_ms = 2;
}

// Constrains the position of a point Q, rigidly attached to a frame B, to be
// within a bounding box measured and expressed in frame A.
// Additional reference:
// https://drake.mit.edu/doxygen_cxx/classdrake_1_1multibody_1_1_position_constraint.html
message PositionConstraint {
  string frame_A = 1;
  string frame_B = 2;
  repeated double p_AQ_lower = 3;
  repeated double p_AQ_upper = 4;
  repeated double p_BQ = 5;
}
// Constrains the angle between a vector a, expressed in frame A, and another
// vector b, expressed in frame B, to be within the open interval [θ_lower,
// θ_upper].
// Additional reference:
// https://drake.mit.edu/doxygen_cxx/classdrake_1_1multibody_1_1_angle_between_vectors_constraint.html
message AngleBetweenVectorsConstraint {
  string frame_A = 1;
  string frame_B = 2;
  repeated double a_A = 3;
  repeated double b_B = 4;
  double angle_lower = 5;
  double angle_upper = 6;
}
// The set of all constraints for a given planning problem.
message ConstraintsSet {
  // The set of all position constraints.
  repeated PositionConstraint pos_constraints = 1;
  // The set of all angle constraints.
  repeated AngleBetweenVectorsConstraint angle_constraints = 2;
  // TODO(@davebambrick): Add collision filtering
}

// The set of all information which uniquely defines a planning problem.
message ProblemDef {
  // Plan name.
  string name = 1;
  // Goal configuration.
  SystemConf goal = 2;
  // Start configuration.
  SystemConf start = 3;
  Parameters params = 4;
  ConstraintsSet constraints = 5;
  // TODO(@davebambrick): deprecate ASAP
  double orientation_tol = 6;
  bool use_columnar_constraint = 7;
  bool use_height_constraint = 8;
  PlanContextId context_id = 9;
}

// Parameters which provide supplemental information to the planner (f.e., what
// kind of system is requesting a plan).
message Parameters {
  string system_name = 1;
  string model_directive = 2;
  string robot_name = 3;
}

// Enum which controls plan retrieval behavior for a given RetrievePlanRequest.
enum RetrieveType {
  // Default value.
  UNSPECIFIED_RETRIEVE_TYPE = 0;
  // Wait indefinitely for the computation of the plan to complete.
  BLOCKING = 1;
  // Only return if computation is completed at the time of reciept of the
  // request. Equivalent to a "timeout" of length zero.
  IF_READY = 2;
  // Wait for a given interval for computation to complete before returning
  // failure.
  WITH_TIMEOUT = 3;
}

// Enum which controls the format of the returned trajectory.
enum PlanType {
  // Default value.
  UNSPECIFIED_TRAJ_TYPE = 0;
  // Return as a system polynomial.
  SYSTEM_POLY = 1;
  // Return as an array of waypoints.
  SYSTEM_TRAJECTORY = 2;
}

// Message containing the name of the model, which will be used to set its
// filename, and the raw contents of its geometric representation. Currently
// only UDRF formats are supported.
message Model {
  string name = 1;
  string urdf_raw = 2;      // raw contents of URDF file
  string package_name = 3;  // name of package in which the URDF lives
  string checksum = 4;      // unique checksum for the URDF
}

// Message containing the unique hash computed from a given unique plan context,
// as well as metadata relevant to the context.
message PlanContextId {
  // The hash-based value.
  uint64 value = 1;
  // The associated top-level system name.
  string system_name = 2;
}

// Message containing the required information to uniquely define a given
// context for motion planning. Concretely, this corresponds to:
//   1.) A set of Models, which each correspond to a constituent robot in the
//   overall system.
//   2.) A Model Directive, which describes the relative positioning and other
//   properties of each model in the overall system.
//   3.) A set of ConstraintsSet, which impose certain geometric constraints on
//   the system.
message PlanContext {
  // The associated top-level system name.
  string system_name = 1;
  // The model directive YAML contents as string.
  string model_directive_raw = 2;
  // The set of all robot models.
  repeated Model models = 3;
  // The set of constraints imposed on the system.
  ConstraintsSet constraints = 4;
  // The ID of the context.
  PlanContextId id = 5;
}
