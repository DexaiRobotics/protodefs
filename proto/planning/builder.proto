syntax = "proto3";

import "types.proto";
package proto;

/** Request containing all information necessary to start generating a set of
 * IRIS regions for a given planning context from a set of seed configurations.
 */
message StartBuildFromConfsRequest {
  string request_id = 1;
  // Unique ID for a given plan context
  PlanContextId context_id = 2;
  // set of configurations; this data can be used to populate IRIS regions
  // either directly, or by first computing edges between each valid pair
  // in the set and then sampling from those edges
  repeated SystemConf seed_configs = 3;
}

/** Request containing all information necessary to start generating a set of
 * IRIS regions for a given planning context from a set of edges which satisfy
 * the given context. */
message StartBuildFromEdgesRequest {
  string request_id = 1;
  // Unique ID for a given plan context
  PlanContextId context_id = 2;
  // set of edges, used to populate IRIS regions by sampling points along each
  // valid edge
  repeated SystemConfEdge seed_edges = 3;
}

/** Response which contains the result of attempting to start computation of a
 * solution for the corresponding StartBuildFromConfsRequest. */
message StartBuildResponse {
  string request_id = 1;
  bool success = 2;
  // msg used to convey extra information to client; usually
  // for explaining cause of error
  string msg = 3;
}

/** Request to retrieve the status of a given IRIS region generation job with a
 * unique ID. */
message ReportBuildStatusRequest {
  string request_id = 1;
}

/** Response which contains the result of retrieving the status of the job with
 * the given ID. */
message ReportBuildStatusResponse {
  string request_id = 1;
  bool complete = 2;
  string msg = 3;
}

service IrisBuilder {
  /** Start a build job from a set of seed confiugrations. */
  rpc HandleStartBuildFromConfsRequest(StartBuildFromConfsRequest)
      returns (StartBuildResponse) {}
  /** Start a build job from a set of seed confiugration edges. */
  rpc HandleStartBuildFromEdgesRequest(StartBuildFromEdgesRequest)
      returns (StartBuildResponse) {}
  /** Return a reoprt on the status of a build job with the given original
   * request ID. */
  rpc HandleReportStatusRequest(ReportBuildStatusRequest)
      returns (ReportBuildStatusResponse) {}
}
